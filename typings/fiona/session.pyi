"""
This type stub file was generated by pyright.
"""

"""Abstraction for sessions in various clouds."""
log = ...

class Session:
    """Base for classes that configure access to secured resources.

    Attributes
    ----------
    credentials : dict
        Keys and values for session credentials.

    Notes
    -----
    This class is not intended to be instantiated.

    """

    @classmethod
    def hascreds(cls, config):  # -> _NotImplementedType:
        """Determine if the given configuration has proper credentials

        Parameters
        ----------
        cls : class
            A Session class.
        config : dict
            GDAL configuration as a dict.

        Returns
        -------
        bool

        """
        ...

    def get_credential_options(self):  # -> _NotImplementedType:
        """Get credentials as GDAL configuration options

        Returns
        -------
        dict

        """
        ...

    @staticmethod
    def from_foreign_session(session, cls=...):  # -> DummySession:
        """Create a session object matching the foreign `session`.

        Parameters
        ----------
        session : obj
            A foreign session object.
        cls : Session class, optional
            The class to return.

        Returns
        -------
        Session

        """
        ...

    @staticmethod
    def cls_from_path(
        path,
    ):  # -> type[DummySession] | type[AWSSession] | type[OSSSession] | type[SwiftSession] | type[AzureSession]:
        """Find the session class suited to the data at `path`.

        Parameters
        ----------
        path : str
            A dataset path or identifier.

        Returns
        -------
        class

        """
        ...

    @staticmethod
    def from_path(
        path, *args, **kwargs
    ):  # -> AWSSession | AzureSession | DummySession | OSSSession | SwiftSession:
        """Create a session object suited to the data at `path`.

        Parameters
        ----------
        path : str
            A dataset path or identifier.
        args : sequence
            Positional arguments for the foreign session constructor.
        kwargs : dict
            Keyword arguments for the foreign session constructor.

        Returns
        -------
        Session

        """
        ...

    @staticmethod
    def aws_or_dummy(*args, **kwargs):  # -> AWSSession | DummySession:
        """Create an AWSSession if boto3 is available, else DummySession

        Parameters
        ----------
        path : str
            A dataset path or identifier.
        args : sequence
            Positional arguments for the foreign session constructor.
        kwargs : dict
            Keyword arguments for the foreign session constructor.

        Returns
        -------
        Session
        """
        ...

    @staticmethod
    def from_environ(*args, **kwargs):  # -> AWSSession | DummySession:
        """Create a session object suited to the environment.

        Parameters
        ----------
        path : str
            A dataset path or identifier.
        args : sequence
            Positional arguments for the foreign session constructor.
        kwargs : dict
            Keyword arguments for the foreign session constructor.

        Returns
        -------
        Session
        """
        ...

class DummySession(Session):
    """A dummy session.

    Attributes
    ----------
    credentials : dict
        The session credentials.

    """

    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def hascreds(cls, config):  # -> Literal[True]:
        """Determine if the given configuration has proper credentials

        Parameters
        ----------
        cls : class
            A Session class.
        config : dict
            GDAL configuration as a dict.

        Returns
        -------
        bool

        """
        ...

    def get_credential_options(self):  # -> dict[Any, Any]:
        """Get credentials as GDAL configuration options

        Returns
        -------
        dict

        """
        ...

class AWSSession(Session):
    """Configures access to secured resources stored in AWS S3."""

    def __init__(
        self,
        session=...,
        aws_unsigned=...,
        aws_access_key_id=...,
        aws_secret_access_key=...,
        aws_session_token=...,
        region_name=...,
        profile_name=...,
        endpoint_url=...,
        requester_pays=...,
    ) -> None:
        """Create a new AWS session

        Parameters
        ----------
        session : optional
            A boto3 session object.
        aws_unsigned : bool, optional (default: False)
            If True, requests will be unsigned.
        aws_access_key_id : str, optional
            An access key id, as per boto3.
        aws_secret_access_key : str, optional
            A secret access key, as per boto3.
        aws_session_token : str, optional
            A session token, as per boto3.
        region_name : str, optional
            A region name, as per boto3.
        profile_name : str, optional
            A shared credentials profile name, as per boto3.
        endpoint_url: str, optional
            An endpoint_url, as per GDAL's AWS_S3_ENPOINT
        requester_pays : bool, optional
            True if the requester agrees to pay transfer costs (default:
            False)

        """
        ...

    @classmethod
    def hascreds(cls, config):  # -> bool:
        """Determine if the given configuration has proper credentials

        Parameters
        ----------
        cls : class
            A Session class.
        config : dict
            GDAL configuration as a dict.

        Returns
        -------
        bool

        """
        ...

    @property
    def credentials(self):  # -> dict[Any, Any]:
        """The session credentials as a dict"""
        ...

    def get_credential_options(self):  # -> dict[str, str] | dict[Any, Any]:
        """Get credentials as GDAL configuration options

        Returns
        -------
        dict

        """
        ...

class GSSession(Session):
    """Configures access to secured resources stored in Google Cloud Storage"""

    def __init__(self, google_application_credentials=...) -> None:
        """Create new Google Cloude Storage session

        Parameters
        ----------
        google_application_credentials: string
            Path to the google application credentials JSON file.

        """
        ...

    @classmethod
    def hascreds(cls, config):  # -> bool:
        """Determine if the given configuration has proper credentials

        Parameters
        ----------
        cls : class
            A Session class.
        config : dict
            GDAL configuration as a dict.

        Returns
        -------
        bool

        """
        ...

    @property
    def credentials(self):  # -> dict[Any, Any]:
        """The session credentials as a dict"""
        ...

    def get_credential_options(self):  # -> dict[Any, Any]:
        """Get credentials as GDAL configuration options

        Returns
        -------
        dict

        """
        ...

class OSSSession(Session):
    """Configures access to secured resources stored in Alibaba Cloud OSS."""

    def __init__(
        self, oss_access_key_id=..., oss_secret_access_key=..., oss_endpoint=...
    ) -> None:
        """Create new Alibaba Cloud OSS session

        Parameters
        ----------
        oss_access_key_id: string, optional (default: None)
            An access key id
        oss_secret_access_key: string, optional (default: None)
            An secret access key
        oss_endpoint: string, optional (default: None)
            the region attached to the bucket

        """
        ...

    @classmethod
    def hascreds(cls, config):  # -> bool:
        """Determine if the given configuration has proper credentials

        Parameters
        ----------
        cls : class
            A Session class.
        config : dict
            GDAL configuration as a dict.

        Returns
        -------
        bool

        """
        ...

    @property
    def credentials(self):  # -> dict[str, Any | None]:
        """The session credentials as a dict"""
        ...

    def get_credential_options(self):  # -> dict[str, Any | None]:
        """Get credentials as GDAL configuration options

        Returns
        -------
        dict

        """
        ...

class SwiftSession(Session):
    """Configures access to secured resources stored in OpenStack Swift Object Storage."""

    def __init__(
        self,
        session=...,
        swift_storage_url=...,
        swift_auth_token=...,
        swift_auth_v1_url=...,
        swift_user=...,
        swift_key=...,
    ) -> None:
        """Create new OpenStack Swift Object Storage Session.

        Three methods are possible:
            1. Create session by the swiftclient library.
            2. The SWIFT_STORAGE_URL and SWIFT_AUTH_TOKEN (this method
               is recommended by GDAL docs).
            3. The SWIFT_AUTH_V1_URL, SWIFT_USER and SWIFT_KEY (This
               depends on the swiftclient library).

        Parameters
        ----------
        session: optional
            A swiftclient connection object
        swift_storage_url:
            the storage URL
        swift_auth_token:
            the value of the x-auth-token authorization token
        swift_storage_url: string, optional
            authentication URL
        swift_user: string, optional
            user name to authenticate as
        swift_key: string, optional
            key/password to authenticate with

        Examples
        --------
        >>> import rasterio
        >>> from rasterio.session import SwiftSession
        >>> fp = '/vsiswift/bucket/key.tif'
        >>> conn = Connection(
        ...     authurl='http://127.0.0.1:7777/auth/v1.0',
        ...     user='test:tester',
        ...     key='testing'
        ... )
        >>> session = SwiftSession(conn)
        >>> with rasterio.Env(session):
        >>>     with rasterio.open(fp) as src:
        >>>         print(src.profile)

        """
        ...

    @classmethod
    def hascreds(cls, config):  # -> bool:
        """Determine if the given configuration has proper credentials

        Parameters
        ----------
        cls : class
            A Session class.
        config : dict
            GDAL configuration as a dict.

        Returns
        -------
        bool

        """
        ...

    @property
    def credentials(self):  # -> dict[str, Any]:
        """The session credentials as a dict"""
        ...

    def get_credential_options(self):  # -> dict[str, Any]:
        """Get credentials as GDAL configuration options

        Returns
        -------
        dict

        """
        ...

class AzureSession(Session):
    """Configures access to secured resources stored in Microsoft Azure Blob Storage."""

    def __init__(
        self,
        azure_storage_connection_string=...,
        azure_storage_account=...,
        azure_storage_access_key=...,
        azure_unsigned=...,
    ) -> None:
        """Create new Microsoft Azure Blob Storage session

        Parameters
        ----------
        azure_storage_connection_string: string
            A connection string contains both an account name and a secret key.
        azure_storage_account: string
            An account name
        azure_storage_access_key: string
            A secret key
        azure_unsigned : bool, optional (default: False)
            If True, requests will be unsigned.

        """
        ...

    @classmethod
    def hascreds(cls, config):  # -> bool:
        """Determine if the given configuration has proper credentials

        Parameters
        ----------
        cls : class
            A Session class.
        config : dict
            GDAL configuration as a dict.

        Returns
        -------
        bool

        """
        ...

    @property
    def credentials(self):  # -> dict[str, Any] | dict[str, str | Any | None]:
        """The session credentials as a dict"""
        ...

    def get_credential_options(self):  # -> dict[str, str | Any | None]:
        """Get credentials as GDAL configuration options

        Returns
        -------
        dict

        """
        ...
