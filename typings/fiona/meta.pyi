"""
This type stub file was generated by pyright.
"""

from fiona.env import require_gdal_version

log = ...

class MetadataItem:
    CREATION_FIELD_DATA_TYPES = ...
    CREATION_FIELD_DATA_SUB_TYPES = ...
    CREATION_OPTION_LIST = ...
    LAYER_CREATION_OPTION_LIST = ...
    DATASET_OPEN_OPTIONS = ...
    EXTENSIONS = ...
    EXTENSION = ...
    VIRTUAL_IO = ...
    NOT_NULL_FIELDS = ...
    NOT_NULL_GEOMETRY_FIELDS = ...
    UNIQUE_FIELDS = ...
    DEFAULT_FIELDS = ...
    OPEN = ...
    CREATE = ...

@require_gdal_version("2.0")
def dataset_creation_options(driver):  # -> dict[Any, Any]:
    """Returns dataset creation options for driver

    Parameters
    ----------
    driver : str

    Returns
    -------
    dict
        Dataset creation options

    """
    ...

@require_gdal_version("2.0")
def layer_creation_options(driver):  # -> dict[Any, Any]:
    """Returns layer creation options for driver

    Parameters
    ----------
    driver : str

    Returns
    -------
    dict
        Layer creation options

    """
    ...

@require_gdal_version("2.0")
def dataset_open_options(driver):  # -> dict[Any, Any]:
    """Returns dataset open options for driver

    Parameters
    ----------
    driver : str

    Returns
    -------
    dict
        Dataset open options

    """
    ...

@require_gdal_version("2.0")
def print_driver_options(driver):  # -> None:
    """Print driver options for dataset open, dataset creation, and layer creation.

    Parameters
    ----------
    driver : str

    """
    ...

@require_gdal_version("2.0")
def extensions(driver):  # -> list[Any] | None:
    """Returns file extensions supported by driver

    Parameters
    ----------
    driver : str

    Returns
    -------
    list
        List with file extensions or None if not specified by driver

    """
    ...

def extension(driver):
    """Returns file extension of driver

    Parameters
    ----------
    driver : str

    Returns
    -------
    str
        File extensions or None if not specified by driver

    """
    ...

@require_gdal_version("2.0")
def supports_vsi(driver):  # -> Literal[False]:
    """Returns True if driver supports GDAL's VSI*L API

    Parameters
    ----------
    driver : str

    Returns
    -------
    bool

    """
    ...

@require_gdal_version("2.0")
def supported_field_types(driver):  # -> list[Any] | None:
    """Returns supported field types

    Parameters
    ----------
    driver : str

    Returns
    -------
    list
        List with supported field types or None if not specified by driver

    """
    ...

@require_gdal_version("2.3")
def supported_sub_field_types(driver):  # -> list[Any] | None:
    """Returns supported sub field types

    Parameters
    ----------
    driver : str

    Returns
    -------
    list
        List with supported field types or None if not specified by driver

    """
    ...
