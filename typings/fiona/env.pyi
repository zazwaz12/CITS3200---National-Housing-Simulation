"""
This type stub file was generated by pyright.
"""

import os
import threading
from functools import total_ordering

import attr

"""Fiona's GDAL/AWS environment"""

class ThreadEnv(threading.local):
    def __init__(self) -> None: ...

local = ...
log = ...

class Env:
    """Abstraction for GDAL and AWS configuration

    The GDAL library is stateful: it has a registry of format drivers,
    an error stack, and dozens of configuration options.

    Fiona's approach to working with GDAL is to wrap all the state
    up using a Python context manager (see PEP 343,
    https://www.python.org/dev/peps/pep-0343/). When the context is
    entered GDAL drivers are registered, error handlers are
    configured, and configuration options are set. When the context
    is exited, drivers are removed from the registry and other
    configurations are removed.

    Example:

        with fiona.Env(GDAL_CACHEMAX=512) as env:
            # All drivers are registered, GDAL's raster block cache
            # size is set to 512MB.
            # Commence processing...
            ...
            # End of processing.

        # At this point, configuration options are set to their
        # previous (possible unset) values.

    A boto3 session or boto3 session constructor arguments
    `aws_access_key_id`, `aws_secret_access_key`, `aws_session_token`
    may be passed to Env's constructor. In the latter case, a session
    will be created as soon as needed. AWS credentials are configured
    for GDAL as needed.
    """

    @classmethod
    def default_options(cls):  # -> dict[str, bool]:
        """Default configuration options

        Parameters
        ----------
        None

        Returns
        -------
        dict

        """
        ...

    def __init__(
        self,
        session=...,
        aws_unsigned=...,
        profile_name=...,
        session_class=...,
        **options
    ) -> None:
        """Create a new GDAL/AWS environment.
        Note: this class is a context manager. GDAL isn't configured
        until the context is entered via `with fiona.Env():`

        Parameters
        ----------
        session : optional
            A Session object.
        aws_unsigned : bool, optional
            Do not sign cloud requests.
        profile_name : str, optional
            A shared credentials profile name, as per boto3.
        session_class : Session, optional
            A sub-class of Session.
        **options : optional
            A mapping of GDAL configuration options, e.g.,
            `CPL_DEBUG=True, CHECK_WITH_INVERT_PROJ=False`.

        Returns
        -------
        Env

        Notes
        -----
        We raise EnvError if the GDAL config options
        AWS_ACCESS_KEY_ID or AWS_SECRET_ACCESS_KEY are given. AWS
        credentials are handled exclusively by boto3.

        Examples
        --------
        >>> with Env(CPL_DEBUG=True, CPL_CURL_VERBOSE=True):
        ...     with fiona.open("zip+https://example.com/a.zip") as col:
        ...         print(col.profile)

        For access to secured cloud resources, a Fiona Session or a
        foreign session object may be passed to the constructor.

        >>> import boto3
        >>> from fiona.session import AWSSession
        >>> boto3_session = boto3.Session(...)
        >>> with Env(AWSSession(boto3_session)):
        ...     with fiona.open("zip+s3://example/a.zip") as col:
        ...         print(col.profile

        """
        ...

    @classmethod
    def from_defaults(cls, *args, **kwargs):  # -> Env:
        """Create an environment with default config options

        Parameters
        ----------
        args : optional
            Positional arguments for Env()
        kwargs : optional
            Keyword arguments for Env()

        Returns
        -------
        Env

        Notes
        -----
        The items in kwargs will be overlaid on the default values.

        """
        ...

    def credentialize(self):  # -> None:
        """Get credentials and configure GDAL

        Note well: this method is a no-op if the GDAL environment
        already has credentials, unless session is not None.

        Returns
        -------
        None

        """
        ...

    def drivers(self):
        """Return a mapping of registered drivers."""
        ...

    def __enter__(self):  # -> Self:
        ...

    def __exit__(self, exc_type=..., exc_val=..., exc_tb=...):  # -> None:
        ...

def defenv(**options):  # -> None:
    """Create a default environment if necessary."""
    ...

def getenv():
    """Get a mapping of current options."""
    ...

def hasenv():  # -> bool:
    ...

def setenv(**options):  # -> None:
    """Set options in the existing environment."""
    ...

def hascreds():  # -> bool:
    ...

def delenv():  # -> None:
    """Delete options in the existing environment."""
    ...

class NullContextManager:
    def __init__(self) -> None: ...
    def __enter__(self):  # -> Self:
        ...

    def __exit__(self, *args):  # -> None:
        ...

def env_ctx_if_needed():  # -> NullContextManager | Env:
    """Return an Env if one does not exist

    Returns
    -------
    Env or a do-nothing context manager

    """
    ...

def ensure_env(f):  # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
    """A decorator that ensures an env exists before a function
    calls any GDAL C functions.

    Parameters
    ----------
    f : function
        A function.

    Returns
    -------
    A function wrapper.

    Notes
    -----
    If there is already an existing environment, the wrapper does
    nothing and immediately calls f with the given arguments.

    """
    ...

def ensure_env_with_credentials(
    f,
):  # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
    """Ensures a config environment exists and has credentials.

    Parameters
    ----------
    f : function
        A function.

    Returns
    -------
    A function wrapper.

    Notes
    -----
    The function wrapper checks the first argument of f and
    credentializes the environment if the first argument is a URI with
    scheme "s3".

    If there is already an existing environment, the wrapper does
    nothing and immediately calls f with the given arguments.

    """
    ...

@attr.s(slots=True)
@total_ordering
class GDALVersion:
    """Convenience class for obtaining GDAL major and minor version
    components and comparing between versions.  This is highly
    simplistic and assumes a very normal numbering scheme for versions
    and ignores everything except the major and minor components.

    """

    major = ...
    minor = ...
    def __eq__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __repr__(self):  # -> str:
        ...

    def __str__(self) -> str: ...
    @classmethod
    def parse(cls, input):  # -> Self:
        """
        Parses input tuple or string to GDALVersion. If input is a GDALVersion
        instance, it is returned.

        Parameters
        ----------
        input: tuple of (major, minor), string, or instance of GDALVersion

        Returns
        -------
        GDALVersion instance

        """
        ...

    @classmethod
    def runtime(cls):  # -> Self:
        """Return GDALVersion of current GDAL runtime"""
        ...

    def at_least(self, other):  # -> bool:
        ...

def require_gdal_version(
    version, param=..., values=..., is_max_version=..., reason=...
):  # -> Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]]:
    """A decorator that ensures the called function or parameters are supported
    by the runtime version of GDAL.  Raises GDALVersionError if conditions
    are not met.

    Examples:
    \b
        @require_gdal_version('2.2')
        def some_func():

    calling `some_func` with a runtime version of GDAL that is < 2.2 raises a
    GDALVersionErorr.

    \b
        @require_gdal_version('2.2', param='foo')
        def some_func(foo='bar'):

    calling `some_func` with parameter `foo` of any value on GDAL < 2.2 raises
    a GDALVersionError.

    \b
        @require_gdal_version('2.2', param='foo', values=('bar',))
        def some_func(foo=None):

    calling `some_func` with parameter `foo` and value `bar` on GDAL < 2.2
    raises a GDALVersionError.


    Parameters
    ------------
    version: tuple, string, or GDALVersion
    param: string (optional, default: None)
        If `values` are absent, then all use of this parameter with a value
        other than default value requires at least GDAL `version`.
    values: tuple, list, or set (optional, default: None)
        contains values that require at least GDAL `version`.  `param`
        is required for `values`.
    is_max_version: bool (optional, default: False)
        if `True` indicates that the version provided is the maximum version
        allowed, instead of requiring at least that version.
    reason: string (optional: default: '')
        custom error message presented to user in addition to message about
        GDAL version.  Use this to provide an explanation of what changed
        if necessary context to the user.

    Returns
    ---------
    wrapped function

    """
    ...

if "GDAL_DATA" not in os.environ:
    path = ...
if "PROJ_DATA" in os.environ:
    path = ...
else:
    path = ...
