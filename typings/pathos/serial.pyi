"""
This type stub file was generated by pyright.
"""

from builtins import map as _map

from pathos.abstract_launcher import AbstractWorkerPool

"""
This module contains map and pipe interfaces to standard (i.e. serial) python.

Pipe methods provided:
    pipe        - blocking communication pipe             [returns: value]

Map methods provided:
    map         - blocking and ordered worker pool      [returns: list]
    imap        - non-blocking and ordered worker pool  [returns: iterator]


Usage
=====

A typical call to a pathos python map will roughly follow this example:

    >>> # instantiate and configure the worker pool
    >>> from pathos.serial import SerialPool
    >>> pool = SerialPool()
    >>>
    >>> # do a blocking map on the chosen function
    >>> print(pool.map(pow, [1,2,3,4], [5,6,7,8]))
    >>>
    >>> # do a non-blocking map, then extract the results from the iterator
    >>> results = pool.imap(pow, [1,2,3,4], [5,6,7,8])
    >>> print("...")
    >>> print(list(results))
    >>>
    >>> # do one item at a time, using a pipe
    >>> print(pool.pipe(pow, 1, 5))
    >>> print(pool.pipe(pow, 2, 6))


Notes
=====

This worker pool leverages the built-in python maps, and thus does not have
limitations due to serialization of the function f or the sequences in args.
The maps in this worker pool have full functionality whether run from a script
or in the python interpreter, and work reliably for both imported and
interactively-defined functions.

"""
__all__ = ["SerialPool"]
__get_nodes__ = ...
__set_nodes__ = ...
_apply = ...
_imap = _map
_SerialPool__STATE = ...

class SerialPool(AbstractWorkerPool):
    """
    Mapper that leverages standard (i.e. serial) python maps.
    """

    _exiting = ...
    def map(self, f, *args, **kwds):  # -> map[Any]:
        ...

    def imap(self, f, *args, **kwds):  # -> map[Any]:
        ...

    def pipe(self, f, *args, **kwds): ...
    def restart(self, force=...):  # -> None:
        "restart a closed pool"
        ...

    def close(self):  # -> None:
        "close the pool to any new jobs"
        ...

    def terminate(self):  # -> None:
        "a more abrupt close"
        ...

    def join(self):  # -> None:
        "cleanup the closed worker processes"
        ...

    def clear(self):  # -> None:
        """hard restart"""
        ...
    __get_nodes = ...
    __set_nodes = ...
    nodes = ...
    __state__ = ...

PythonSerial = SerialPool
